#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import requests
import time
import json
import threading
import os
from datetime import datetime, timedelta
from pathlib import Path
from config import *

# –¢–∞–±–ª–∏—Ü–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
BACK_TRANSITIONS = {
    "waiting_txid": "waiting_screenshot",
    "waiting_screenshot": "payment_intro",
    "payment_intro": "menu"
}

# –¢–∞—Ä–∏—Ñ—ã –∏ —Ü–µ–Ω—ã
PLANS = {
    "1m": {"name": "1 –º–µ—Å—è—Ü", "price": 39, "days": 30},
    "3m": {"name": "3 –º–µ—Å—è—Ü–∞", "price": 99, "days": 90},
    "lifetime": {"name": "–ü–æ–∂–∏–∑–Ω–µ–Ω–Ω–æ", "price": 239, "days": None}
}

# –°–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
STATUS_MESSAGES = {
    "active": "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞",
    "pending": "‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
    "expired": "‚ùå –ò—Å—Ç–µ–∫–ª–∞",
    "none": "‚ùå –ù–µ –∞–∫—Ç–∏–≤–Ω–∞"
}

from db import Database

class SignalBot:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        self.token = TOKEN
        self.base_url = f"https://api.telegram.org/bot{self.token}"
        self.db = Database()
        self.last_message_id = None
        self.running = False
        self.last_backup_date = None
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–∞
        self.send_log("[BOT] –ó–∞–ø—É—â–µ–Ω...")
    
    def safe_parse_date(self, value):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç ISO-–¥–∞—Ç—É –≤ datetime –∏–ª–∏ None"""
        if isinstance(value, str) and value.strip():
            try:
                return datetime.fromisoformat(value)
            except (ValueError, TypeError):
                return None
        return None
    
    def send_request(self, method, params=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Telegram API —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            url = f"{self.base_url}/{method}"
            response = requests.post(url, json=params, timeout=30)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ HTTP –æ—à–∏–±–æ–∫ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º timeout –∏ 409)
            if response.status_code == 400:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ callback-–∑–∞–ø—Ä–æ—Å—ã Telegram
                if "query is too old" in response.text or "query ID is invalid" in response.text:
                    return None
                error_msg = f"[ERROR] Bad Request 400: {response.text}"
                print(error_msg)
                self.send_log(error_msg)
                return None
            elif response.status_code == 409:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º 409 –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
                return None
            elif response.status_code == 429:
                # Rate limit - –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                time.sleep(1)
                return None
            
            response.raise_for_status()
            return response.json()
            
        except requests.exceptions.Timeout:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º timeout –æ—à–∏–±–∫–∏
            return None
        except requests.exceptions.RequestException as e:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –æ—à–∏–±–∫–∏, –ª–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ
            if "no such column" not in str(e).lower():
                error_msg = f"[ERROR] API –∑–∞–ø—Ä–æ—Å {method}: {e}"
                print(error_msg)
                self.send_log(error_msg)
            return None
        except Exception as e:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –æ—à–∏–±–∫–∏, –ª–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ
            if "timeout" not in str(e).lower() and "no such column" not in str(e).lower():
                error_msg = f"[ERROR] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ {method}: {e}"
                print(error_msg)
                self.send_log(error_msg)
            return None
    
    def send_message(self, chat_id, text, reply_markup=None, parse_mode="HTML"):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            if not chat_id or not isinstance(chat_id, (int, str)):
                self.send_log(f"[WARN] –ü—Ä–æ–ø—É—â–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ ‚Äî –Ω–µ–≤–µ—Ä–Ω—ã–π chat_id: {chat_id}")
                return False

            params = {
                "chat_id": chat_id,
                "text": text,
                "parse_mode": parse_mode
            }
            if reply_markup:
                params["reply_markup"] = reply_markup

            response = self.send_request("sendMessage", params)
            if not response or not response.get("ok"):
                desc = response.get("description", "unknown error") if response else "no response"
                self.send_log(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ({chat_id}): {desc}")
                return False

            return True

        except Exception as e:
            if "chat not found" not in str(e).lower():
                error_msg = f"[ERROR] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ {chat_id}: {e}"
                print(error_msg)
                self.send_log(error_msg)
            return False
    
    def send_media_group(self, chat_id, media):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª—å–±–æ–º–∞ (–Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–æ—Ç–æ)"""
        try:
            params = {
                "chat_id": chat_id,
                "media": json.dumps(media)
            }
            
            result = self.send_request("sendMediaGroup", params)
            return result is not None and result.get("ok", False)
        except Exception as e:
            error_msg = f"[ERROR] –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª—å–±–æ–º–∞ –≤ {chat_id}: {e}"
            print(error_msg)
            self.send_log(error_msg)
            return False
    
    def send_photo(self, chat_id, photo_path, caption=None, parse_mode="HTML"):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ"""
        try:
            if not chat_id or not isinstance(chat_id, (int, str)):
                self.send_log(f"[WARN] –ü—Ä–æ–ø—É—â–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ ‚Äî –Ω–µ–≤–µ—Ä–Ω—ã–π chat_id: {chat_id}")
                return False

            if not os.path.exists(photo_path):
                self.send_log(f"[ERROR] –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {photo_path}")
                return False

            with open(photo_path, "rb") as photo_file:
                response = requests.post(
                    f"{self.base_url}/sendPhoto",
                    data={"chat_id": chat_id, "caption": caption or "", "parse_mode": parse_mode},
                    files={"photo": photo_file},
                    timeout=20
                )

            if response.status_code == 400 and "chat not found" in response.text:
                self.send_log(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ ‚Äî chat not found (chat_id={chat_id})")
                return False

            response.raise_for_status()
            return True

        except Exception as e:
            if "chat not found" not in str(e).lower():
                error_msg = f"[ERROR] –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –≤ {chat_id}: {e}"
                print(error_msg)
                self.send_log(error_msg)
            return False
    
    def send_signal_intro(self, chat_id, intro_text):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–≤–µ–¥–µ–Ω–∏—è —Å –ø—Ä–∏–º–µ—Ä–æ–º —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Å –ø—Ä–∏–º–µ—Ä–æ–º —Å–∏–≥–Ω–∞–ª–∞
            signal_example_url = SIGNAL_EXAMPLE_URL
            
            success = self.send_photo(chat_id, signal_example_url, intro_text, "HTML")
            
            if not success:
                # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
                self.send_signal_examples(chat_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –≤–≤–µ–¥–µ–Ω–∏—è
            keyboard = self.create_reply_keyboard([
                ["üí∞ –û–ø–ª–∞—Ç–∞"],
                ["üßæ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "üÜò –ü–æ–º–æ—â—å"]
            ])
            self.send_message(chat_id, "üí° –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:", keyboard)
                
        except Exception as e:
            error_msg = f"[ERROR] –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–≤–µ–¥–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞: {e}"
            print(error_msg)
            self.send_log(error_msg)
    
    def send_signal_examples(self, chat_id):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª—å–±–æ–º–∞ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            # –ü—Ä–∏–º–µ—Ä—ã –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ URL)
            media = [
                {
                    "type": "photo", 
                    "media": "https://via.placeholder.com/800x600/1f2937/ffffff?text=üìä+–†–µ–∞–ª—å–Ω—ã–µ+—Å–∏–≥–Ω–∞–ª—ã+–æ—Ç+—Ç—Ä–µ–π–¥–µ—Ä–æ–≤+SignalBot+Pro",
                    "caption": "üìä –†–µ–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –æ—Ç —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ SignalBot Pro"
                },
                {
                    "type": "photo", 
                    "media": "https://via.placeholder.com/800x600/059669/ffffff?text=üí∞+–ü—Ä–∏–±—ã–ª—å+–∑–∞+—Å–µ–Ω—Ç—è–±—Ä—å:+%2B18.5%25",
                    "caption": "üí∞ –ü—Ä–∏–±—ã–ª—å –∑–∞ —Å–µ–Ω—Ç—è–±—Ä—å: +18.5%"
                },
                {
                    "type": "photo", 
                    "media": "https://via.placeholder.com/800x600/7c3aed/ffffff?text=üìà+–í—Ö–æ–¥,+—Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç+–∏+—Å—Ç–æ–ø+‚Äî+–≤—Å—ë+—á—ë—Ç–∫–æ+–∏+–ø—Ä–æ—Å—Ç–æ",
                    "caption": "üìà –í—Ö–æ–¥, —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –∏ —Å—Ç–æ–ø ‚Äî –≤—Å—ë —á—ë—Ç–∫–æ –∏ –ø—Ä–æ—Å—Ç–æ"
                }
            ]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º
            success = self.send_media_group(chat_id, media)
            
            if success:
                # –ü–æ—Å–ª–µ –∞–ª—å–±–æ–º–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
                follow_up_text = """üî• –≠—Ç–æ –ª–∏—à—å —á–∞—Å—Ç—å –Ω–∞—à–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü.
üëâ –•–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –∏—Ö –ø–µ—Ä–≤—ã–º? –í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ –≤ —Ä–∞–∑–¥–µ–ª–µ üí∞ –û–ø–ª–∞—Ç–∞."""
                self.send_message(chat_id, follow_up_text)
            else:
                # –ï—Å–ª–∏ –∞–ª—å–±–æ–º –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                fallback_text = """üìä –ü—Ä–∏–º–µ—Ä—ã –Ω–∞—à–∏—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤:

üî• BTC/USDT LONG
üìà –í—Ö–æ–¥: $45,200
üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: $47,500 (+5.1%)
üõ° –°—Ç–æ–ø-–ª–æ—Å—Å: $43,800 (-3.1%)
‚è∞ –í—Ä–µ–º—è: 14:30 UTC

üî• ETH/USDT SHORT  
üìâ –í—Ö–æ–¥: $3,150
üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: $3,050 (+3.2%)
üõ° –°—Ç–æ–ø-–ª–æ—Å—Å: $3,220 (-2.2%)
‚è∞ –í—Ä–µ–º—è: 16:45 UTC

üíé –ü—Ä–∏–±—ã–ª—å –∑–∞ —Å–µ–Ω—Ç—è–±—Ä—å: +18.5%

üëâ –•–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Ç–∞–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã –ø–µ—Ä–≤—ã–º? –í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ –≤ —Ä–∞–∑–¥–µ–ª–µ üí∞ –û–ø–ª–∞—Ç–∞."""
                self.send_message(chat_id, fallback_text)
                
        except Exception as e:
            error_msg = f"[ERROR] –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}"
            print(error_msg)
            self.send_log(error_msg)
    
    def forward_message(self, from_chat_id, to_chat_id, message_id):
        """–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            params = {
                "chat_id": to_chat_id,
                "from_chat_id": from_chat_id,
                "message_id": message_id
            }
            
            result = self.send_request("forwardMessage", params)
            return result is not None and result.get("ok", False)
        except Exception as e:
            error_msg = f"[ERROR] –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –≤ {to_chat_id}: {e}"
            print(error_msg)
            return False
    
    def get_updates(self, offset=None, timeout=30):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram"""
        try:
            params = {"timeout": timeout}
            if offset:
                params["offset"] = offset
            
            result = self.send_request("getUpdates", params)
            if result and result.get("ok"):
                return result.get("result", [])
            return []
        except Exception as e:
            error_msg = f"[ERROR] –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}"
            print(error_msg)
            self.send_log(error_msg)
            return []
    
    def send_log(self, text):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–∞ –≤ –∫–∞–Ω–∞–ª"""
        try:
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            log_message = f"[{timestamp}] {text}"
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª
            success = self.send_message(LOG_CHANNEL_ID, log_message)
            
            if not success:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥ –≤ –∫–∞–Ω–∞–ª: {log_message}")
            
        except Exception as e:
            error_msg = f"[ERROR] –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: {e}"
            print(error_msg)
    
    def send_file_log(self, file_id, username, user_id):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –Ω–∞–ø—Ä—è–º—É—é –≤ –ª–æ–≥-–∫–∞–Ω–∞–ª"""
        try:
            self.send_request("sendPhoto", {
                "chat_id": LOG_CHANNEL_ID,
                "photo": file_id,
                "caption": f"[SCREENSHOT]\nUser: @{username or 'unknown'} (ID {user_id})"
            })
        except Exception as e:
            print(f"[ERROR] send_file_log: {e}")
    
    def create_reply_keyboard(self, buttons):
        """–°–æ–∑–¥–∞–Ω–∏–µ Reply Keyboard (–∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å—Ç—Ä–æ–∫–æ–π –≤–≤–æ–¥–∞)"""
        try:
            keyboard = []
            for row in buttons:
                keyboard_row = []
                for button in row:
                    keyboard_row.append(button)
                keyboard.append(keyboard_row)
            
            return {"keyboard": keyboard, "resize_keyboard": True, "one_time_keyboard": False}
        except Exception as e:
            error_msg = f"[ERROR] –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}"
            print(error_msg)
            self.send_log(error_msg)
            return None
    
    def create_inline_keyboard(self, buttons):
        """–°–æ–∑–¥–∞–Ω–∏–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        try:
            keyboard = []
            for row in buttons:
                keyboard_row = []
                for button in row:
                    keyboard_row.append({
                        "text": button["text"],
                        "callback_data": button["callback_data"]
                    })
                keyboard.append(keyboard_row)
            
            return {"inline_keyboard": keyboard}
        except Exception as e:
            error_msg = f"[ERROR] –°–æ–∑–¥–∞–Ω–∏–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}"
            print(error_msg)
            self.send_log(error_msg)
            return None
    
    def handle_start(self, chat_id, user_id, username):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–æ–≤—ã–π
            if not self.db.user_exists(user_id):
                self.db.add_user(user_id, username)
                self.send_log(f"[NEW USER] @{username} (ID: {user_id})")

            # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π "–ü–æ–º–æ—â—å"
            keyboard = self.create_reply_keyboard([
                ["üìà –ü–æ–ª—É—á–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã"],
                ["üí∞ –û–ø–ª–∞—Ç–∞"],
                ["‚ÑπÔ∏è –ú–æ–π —Å—Ç–∞—Ç—É—Å"],
                ["üßæ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "üÜò –ü–æ–º–æ—â—å"]
            ])

            welcome_text = (
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PTT Trades!\n\n"
                "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –¥–∞–≤–∞—Ç—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø –∫ —Ç–æ—Ä–≥–æ–≤—ã–º —Å–∏–≥–Ω–∞–ª–∞–º –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ.\n"
                "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã, –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, —É–∑–Ω–∞—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å –∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
            )

            self.send_message(chat_id, welcome_text, keyboard)

        except Exception as e:
            error_msg = f"[ERROR] –û–±—Ä–∞–±–æ—Ç–∫–∞ /start: {e}"
            print(error_msg)
            self.send_log(error_msg)
    
    def handle_get_signals(self, chat_id, user_id):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ –ø—Ä–∏–º–µ—Ä–æ–≤"""
        try:
            import json

            data_dir = os.path.join(os.path.dirname(__file__), "data")
            photo1_path = os.path.join(data_dir, "photo.jpg")
            photo2_path = os.path.join(data_dir, "fuck.jpg")

            caption_text = (
                "PTT Trades ‚Äî —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ Forex.\n\n"
                "–¢—ã –ø–æ–ª—É—á–∞–µ—à—å –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å–∏–≥–Ω–∞–ª—ã, –∞ –ø–æ–ª–Ω—ã–µ —Ä–∞–∑–±–æ—Ä—ã —Å–¥–µ–ª–æ–∫ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ–º.\n\n"
                "–ö–∞–∂–¥—ã–π —Å–∏–≥–Ω–∞–ª –≤–∫–ª—é—á–∞–µ—Ç:\n"
                "‚Ä¢ –¢–æ—á–∫—É –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞\n"
                "‚Ä¢ –õ–æ–≥–∏–∫—É –≤—Ö–æ–¥–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã\n"
                "‚Ä¢ –°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏\n"
                "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ä–∏—Å–∫–∞–º–∏\n\n"
                "–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è:\n"
                "‚Äî –í–ª–∞–¥–µ–ª—å—Ü–µ–≤ –ø—Ä–æ–ø-—Å—á–µ—Ç–æ–≤ (—Ä–∏—Å–∫ 1%)\n"
                "‚Äî –¢—Ä–µ–π–¥–µ—Ä–æ–≤ —Å –ª–∏—á–Ω—ã–º –∫–∞–ø–∏—Ç–∞–ª–æ–º\n"
                "‚Äî –í—Å–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –ø–æ–Ω–∏–º–∞—Ç—å —Ä—ã–Ω–æ–∫, –∞ –Ω–µ —É–≥–∞–¥—ã–≤–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\n\n"
                "–§–æ—Ä–º–∞—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ ‚Äî –∫–∞–∫ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ –Ω–∏–∂–µ: —á–µ—Ç–∫–æ, –ª–∞–∫–æ–Ω–∏—á–Ω–æ, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ.\n\n"
                "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞—à–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É –∏ –Ω–∞—á–Ω–∏ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ."
            )

            keyboard = self.create_reply_keyboard([["‚Ü©Ô∏è –ù–∞–∑–∞–¥"]])

            if not os.path.exists(photo1_path) or not os.path.exists(photo2_path):
                missing = []
                if not os.path.exists(photo1_path):
                    missing.append("photo.jpg")
                if not os.path.exists(photo2_path):
                    missing.append("fuck.jpg")
                self.send_message(chat_id, f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {', '.join(missing)}", keyboard)
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∞–ª—å–±–æ–º –∏–∑ –¥–≤—É—Ö —Ñ–æ—Ç–æ
            files = {
                "photo1": open(photo1_path, "rb"),
                "photo2": open(photo2_path, "rb")
            }

            media = [
                {"type": "photo", "media": "attach://photo1"},
                {"type": "photo", "media": "attach://photo2"}
            ]

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º
            requests.post(
                f"{self.base_url}/sendMediaGroup",
                data={"chat_id": chat_id, "media": json.dumps(media)},
                files=files,
                timeout=30
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            self.send_message(chat_id, caption_text, keyboard)

        except Exception as e:
            error_msg = f"[ERROR] handle_get_signals: {e}"
            print(error_msg)
            self.send_log(error_msg)
    
    
    def handle_help_faq(self, chat_id):
        """–†–∞–∑–¥–µ–ª '–ü–æ–º–æ—â—å' ‚Äî —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã"""
        try:
            help_text = """
üß† <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏!</b>

–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥—ë—à—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã,  
–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —Ç–µ–±–µ —É–≤–µ—Ä–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏ –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∏—Å–∫–∞–º–∏ üíº

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚ùì <b>–ö–∞–∫–æ–π —Ä–∏—Å–∫ —Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–æ–∑–∏—Ü–∏—é?</b>  
–ï—Å–ª–∏ —Ç—ã —Ç–æ—Ä–≥—É–µ—à—å –Ω–∞ <b>–ø—Ä–æ–ø-—Å—á—ë—Ç–µ</b> ‚Äî —Ä–∏—Å–∫ —Å—Ç—Ä–æ–≥–æ <b>1%</b>.  
–ï—Å–ª–∏ —ç—Ç–æ <b>–ª–∏—á–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç</b>, –º–æ–∂–Ω–æ —Å—Ç–∞–≤–∏—Ç—å —Ä–∏—Å–∫ –æ—Ç <b>1%</b> –¥–æ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —Å–≤–æ–µ–π <b>RM-—Å–∏—Å—Ç–µ–º–µ</b> ‚öñÔ∏è.
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìà <b>–ë—É–¥–µ—Ç –ª–∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –ø–æ —Å–¥–µ–ª–∫–µ?</b>  
–î–∞ ‚úÖ ‚Äî –∫–∞–∂–¥–∞—è —Å–¥–µ–ª–∫–∞ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ—Ç—Å—è –¥–æ <b>—Ç–µ–π–∫–∞</b>, <b>—Å—Ç–æ–ø–∞</b> –∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ <b>–±–µ–∑—É–±—ã—Ç–æ–∫ (–ë–£)</b>.  
–í—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—É–±–ª–∏–∫—É—é—Ç—Å—è <b>–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</b> –≤ —ç—Ç–æ–º –±–æ—Ç–µ üí¨ ‚Äî —Ç—ã –≤—Å–µ–≥–¥–∞ –≤ –∫—É—Ä—Å–µ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–µ–≥–æ.
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìû <b>–ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã</b> ‚Äî –Ω–∞–ø–∏—à–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:
üëâ <a href="https://t.me/PTTmanager">@PTTmanager</a>
"""
            keyboard = self.create_reply_keyboard([
                ["üßæ –ü–æ–¥–¥–µ—Ä–∂–∫–∞"],
                ["‚Ü©Ô∏è –ù–∞–∑–∞–¥"]
            ])
            self.send_message(chat_id, help_text, reply_markup=keyboard, parse_mode="HTML")

        except Exception as e:
            error_msg = f"[ERROR] –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–º–æ—â–∏: {e}"
            print(error_msg)
            self.send_log(error_msg)
    
    def handle_payment_start(self, chat_id, user_id):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã - –≤—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞"""
        try:
            payment_text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ:"
            
            keyboard = self.create_reply_keyboard([
                ["1 –º–µ—Å—è—Ü ‚Äî 39 USDT"],
                ["3 –º–µ—Å—è—Ü–∞ ‚Äî 99 USDT"],
                ["–ü–æ–∂–∏–∑–Ω–µ–Ω–Ω–æ ‚Äî 239 USDT"],
                ["‚Ü©Ô∏è –ù–∞–∑–∞–¥"]
            ])
            self.send_message(chat_id, payment_text, keyboard)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
            self.db.set_user_state(user_id, "payment_intro")
            
        except Exception as e:
            error_msg = f"[ERROR] –ù–∞—á–∞–ª–æ –æ–ø–ª–∞—Ç—ã: {e}"
            print(error_msg)
            self.send_log(error_msg)
    
    def handle_plan_selection(self, chat_id, user_id, plan_key):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∞–Ω–∞"""
        try:
            plan = PLANS.get(plan_key)
            if not plan:
                self.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
            payment_text = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
            
            # –°–æ–∑–¥–∞–µ–º Reply Keyboard –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
            keyboard = self.create_reply_keyboard([
                ["üí∞ –û–ø–ª–∞—Ç–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–π (TRC20)"],
                ["‚ö° –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Tribute"],
                ["‚Ü©Ô∏è –ù–∞–∑–∞–¥"]
            ])
            
            self.send_message(chat_id, payment_text, keyboard)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.db.set_user_state(user_id, f"payment_method_{plan_key}")
            
        except Exception as e:
            error_msg = f"[ERROR] –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∞–Ω–∞: {e}"
            print(error_msg)
            self.send_log(error_msg)
    
    def handle_crypto_payment(self, chat_id, user_id, plan_key):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–æ–ø–ª–∞—Ç—ã"""
        try:
            plan = PLANS.get(plan_key)
            if not plan:
                self.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥—Ä–µ—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã
            payment_text = f"""–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–ª–∞—Ç—É –Ω–∞ –∞–¥—Ä–µ—Å:
TRC20: {CRYPTO_ADDRESS}
–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω –ø–µ—Ä–µ–≤–æ–¥–∞."""
            
            keyboard = self.create_reply_keyboard([
                ["üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω"],
                ["‚Ü©Ô∏è –ù–∞–∑–∞–¥"]
            ])
            self.send_message(chat_id, payment_text, keyboard)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–µ—Ç–æ–¥–µ –æ–ø–ª–∞—Ç—ã
            self.db.set_user_state(user_id, f"waiting_screenshot_crypto_{plan_key}")
            
        except Exception as e:
            error_msg = f"[ERROR] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏–ø—Ç–æ–æ–ø–ª–∞—Ç—ã: {e}"
            print(error_msg)
            self.send_log(error_msg)
    
    def handle_tribute_payment(self, chat_id, user_id, plan_key):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Tribute"""
        try:
            plan = PLANS.get(plan_key)
            if not plan:
                self.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Tribute
            payment_text = """–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Tribute –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º Telegram mini app.
–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ üëá"""
            
            # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Tribute
            keyboard = {
                "inline_keyboard": [[
                    {"text": "üí∏ –û—Ç–∫—Ä—ã—Ç—å Tribute", "url": TRIBUTE_LINK}
                ]],
                "resize_keyboard": True
            }
            
            self.send_message(chat_id, payment_text, keyboard)
            
            # –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Tribute –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω–µ—Ç—Å—è –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–∫—Ä–∏–Ω
            keyboard_back = self.create_reply_keyboard([["‚Ü©Ô∏è –ù–∞–∑–∞–¥"]])
            self.send_message(chat_id, "–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –≤ Tribute –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç:", keyboard_back)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–µ—Ç–æ–¥–µ –æ–ø–ª–∞—Ç—ã
            self.db.set_user_state(user_id, f"waiting_screenshot_tribute_{plan_key}")
            
        except Exception as e:
            error_msg = f"[ERROR] –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Tribute: {e}"
            print(error_msg)
            self.send_log(error_msg)

    def handle_payment_done(self, chat_id, user_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–Ø –æ–ø–ª–∞—Ç–∏–ª' - –®–∞–≥ 2"""
        try:
            self.send_message(chat_id, "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤–∞—à–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
            keyboard = self.create_reply_keyboard([["‚Ü©Ô∏è –ù–∞–∑–∞–¥"]])
            self.send_message(chat_id, "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥' —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", keyboard)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
            self.db.set_user_state(user_id, "waiting_screenshot")
            
        except Exception as e:
            error_msg = f"[ERROR] –û–±—Ä–∞–±–æ—Ç–∫–∞ '–Ø –æ–ø–ª–∞—Ç–∏–ª': {e}"
            print(error_msg)
            self.send_log(error_msg)
    
    def handle_screenshot(self, chat_id, user_id, username, file_id, user_state=None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã –∏ –ø–ª–∞–Ω –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            payment_method = "crypto"
            plan_key = None
            
            if user_state:
                if user_state.startswith("waiting_screenshot_crypto_"):
                    payment_method = "crypto"
                    plan_key = user_state.replace("waiting_screenshot_crypto_", "")
                elif user_state.startswith("waiting_screenshot_tribute_"):
                    payment_method = "tribute"
                    plan_key = user_state.replace("waiting_screenshot_tribute_", "")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–µ—Ç–æ–¥–µ –∏ –ø–ª–∞–Ω–µ
            payment_id = self.db.add_payment(
                user_id, 
                screenshot_file_id=file_id, 
                status="pending", 
                payment_method=payment_method,
                plan=plan_key
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if plan_key:
                self.db.update_user_status(user_id, "pending", plan_key)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
            current_time = datetime.now().strftime("%Y-%m-%d %H:%M")
            try:
                with open("screenshots_log.txt", "a", encoding="utf-8") as f:
                    f.write(f"{current_time} | @{username or 'unknown'} | ID {user_id} | method: {payment_method} | plan: {plan_key} | file_id: {file_id}\n")
            except Exception as log_error:
                print(f"[LOG ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ —Ñ–∞–π–ª: {log_error}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –≤ –ª–æ–≥-–∫–∞–Ω–∞–ª
            self.send_file_log(file_id, username, user_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            self.send_message(chat_id, "‚úÖ –°–∫—Ä–∏–Ω –ø–æ–ª—É—á–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –∫–∞–Ω–∞–ª –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            plan_name = PLANS.get(plan_key, {}).get("name", "Unknown") if plan_key else "Unknown"
            
            log_message = f"""[NEW PAYMENT]
user: @{username or 'unknown'} (ID {user_id})
method: {payment_method}
tariff: {plan_name}
status: pending"""
            
            self.send_log(log_message)
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.db.set_user_state(user_id, None)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –±–µ–∑ FAQ
            keyboard = self.create_reply_keyboard([
                ["üìà –ü–æ–ª—É—á–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã", "üí∞ –û–ø–ª–∞—Ç–∞"],
                ["‚ÑπÔ∏è –ú–æ–π —Å—Ç–∞—Ç—É—Å"],
                ["üßæ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "üÜò –ü–æ–º–æ—â—å"]
            ])
            self.send_message(chat_id, "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –ø–ª–∞—Ç—ë–∂ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.", keyboard)
            
        except Exception as e:
            error_msg = f"[ERROR] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}"
            print(error_msg)
            self.send_log(error_msg)
    
    def handle_txid(self, chat_id, user_id, username, txid):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è TXID - —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥, —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        try:
            # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–µ –æ–ø–ª–∞—Ç—ã
            # TXID –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, —Ç–æ–ª—å–∫–æ —Å–∫—Ä–∏–Ω—à–æ—Ç
            self.send_message(chat_id, "‚ùå TXID –±–æ–ª—å—à–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")
            
        except Exception as e:
            error_msg = f"[ERROR] –û–±—Ä–∞–±–æ—Ç–∫–∞ TXID: {e}"
            print(error_msg)
            self.send_log(error_msg)
    
    def handle_status(self, chat_id, user_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞"""
        try:
            user = self.db.get_user(user_id)
            if user:
                # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø–∞—Ä—Å–∏–º –¥–∞—Ç—ã –∏–∑ –±–∞–∑—ã
                start_date = None
                end_date = None
                
                if user.get("start_date"):
                    try:
                        start_date = datetime.fromisoformat(user["start_date"])
                    except (ValueError, TypeError):
                        start_date = None
                
                if user.get("end_date"):
                    try:
                        end_date = datetime.fromisoformat(user["end_date"])
                    except (ValueError, TypeError):
                        end_date = None
                
                plan_key = user.get("plan")
                plan_name = PLANS.get(plan_key, {}).get("name", "–ù–µ –≤—ã–±—Ä–∞–Ω") if plan_key else "–ù–µ –≤—ã–±—Ä–∞–Ω"
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–ª–∞—Ç–µ–∂–µ
                payment = self.db.get_user_payment(user_id)
                payment_method = "–ù–µ —É–∫–∞–∑–∞–Ω"
                if payment:
                    payment_method = "Crypto" if payment.get("payment_method") == "crypto" else "Tribute"
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                start_date_str = start_date.strftime("%d.%m.%Y") if start_date else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
                end_date_str = "–ë–µ—Å—Å—Ä–æ—á–Ω–æ" if end_date is None else end_date.strftime("%d.%m.%Y")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                current_time = datetime.now()
                
                if user["status"] == "active":
                    if user["plan"] == "lifetime" or end_date is None:
                        status_text = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞"
                        end_date_str = "–ë–µ—Å—Å—Ä–æ—á–Ω–æ"
                    else:
                        if end_date and end_date > current_time:
                            status_text = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞"
                        else:
                            status_text = "‚ö†Ô∏è –ò—Å—Ç–µ–∫–ª–∞"
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞
                            if end_date and end_date <= current_time:
                                self.db.update_user_status(user_id, "expired")
                elif user["status"] == "pending":
                    status_text = "‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
                elif user["status"] == "expired":
                    status_text = "‚ö†Ô∏è –ò—Å—Ç–µ–∫–ª–∞"
                else:
                    status_text = "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
                
                message = f"""üìä –°—Ç–∞—Ç—É—Å: {status_text}
üì¶ –¢–∞—Ä–∏—Ñ: {plan_name}
üí∞ –ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: {payment_method}
üìÖ –ù–∞—á–∞–ª–æ –ø–æ–¥–ø–∏—Å–∫–∏: {start_date_str}
üìÖ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {end_date_str}"""
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∏—Å—Ç–µ–∫—à–∏—Ö/–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
                if user["status"] in ["expired", "none"]:
                    if user["status"] == "expired":
                        message += "\n\n‚ö†Ô∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø, –Ω–∞–∂–º–∏—Ç–µ ¬´üí∞ –û–ø–ª–∞—Ç–∞¬ª."
                    else:
                        message += "\n\n‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ù–∞–∂–º–∏—Ç–µ ¬´üí∞ –û–ø–ª–∞—Ç–∞¬ª —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –¥–æ—Å—Ç—É–ø."
                    
            else:
                message = "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
            
            self.send_message(chat_id, message)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
            if user and user["status"] in ["expired", "none"]:
                keyboard = self.create_reply_keyboard([
                    ["üí∞ –û–ø–ª–∞—Ç–∞"],
                    ["‚Ü©Ô∏è –ù–∞–∑–∞–¥"]
                ])
            else:
                keyboard = self.create_reply_keyboard([["‚Ü©Ô∏è –ù–∞–∑–∞–¥"]])
            
            self.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", keyboard)
        except Exception as e:
            error_msg = f"[ERROR] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞: {e}"
            print(error_msg)
            self.send_log(error_msg)
    
    def handle_support(self, chat_id):
        """–†–∞–∑–¥–µ–ª '–ü–æ–¥–¥–µ—Ä–∂–∫–∞' ‚Äî –∫–æ–Ω—Ç–∞–∫—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            support_text = """
üßæ <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>

–ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π  
–∏–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ ‚Äî –Ω–∞–ø–∏—à–∏ –Ω–∞–ø—Ä—è–º—É—é üëá

üë§ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> <a href="https://t.me/PTTmanager">@PTTmanager</a>

‚è∞ –û—Ç–≤–µ—Ç –æ–±—ã—á–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 1‚Äì2 —á–∞—Å–æ–≤.
"""
            keyboard = self.create_reply_keyboard([
                ["üÜò –ü–æ–º–æ—â—å"],
                ["‚Ü©Ô∏è –ù–∞–∑–∞–¥"]
            ])
            self.send_message(chat_id, support_text, reply_markup=keyboard, parse_mode="HTML")

        except Exception as e:
            error_msg = f"[ERROR] –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {e}"
            print(error_msg)
            self.send_log(error_msg)
    
    def handle_admin_command(self, chat_id, user_id, command, args):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥"""
        try:
            if user_id not in ADMIN_IDS:
                self.send_message(chat_id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                return
            
            if command == "users":
                users = self.db.get_all_users()
                if users:
                    message = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
                    for user in users[:20]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã—Ö 20
                        status_emoji = "‚úÖ" if user[2] == "active" else "‚è≥" if user[2] == "pending" else "‚ùå"
                        message += f"{status_emoji} @{user[1] or 'no_username'} (ID: {user[0]}) - {user[2]}\n"
                else:
                    message = "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                
                self.send_message(chat_id, message)
            
            elif command == "confirm" and args:
                try:
                    target_user_id = int(args[0])
                    user = self.db.get_user(target_user_id)
                    
                    if not user:
                        self.send_message(chat_id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        return
                    
                    plan_key = user.get("plan")
                    if not plan_key or plan_key not in PLANS:
                        self.send_message(chat_id, "‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –≤—ã–±—Ä–∞–Ω —Ç–∞—Ä–∏—Ñ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ")
                        return
                    
                    plan = PLANS[plan_key]
                    now = datetime.now()
                    
                    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–∞—Ä–∏—Ñ–æ–º
                    start_date = datetime.now()
                    
                    if plan_key == "lifetime":
                        success = self.db.update_user_status(
                            target_user_id, 
                            "active", 
                            plan_key, 
                            start_date.isoformat(), 
                            None
                        )
                        end_date_str = "–±–µ—Å—Å—Ä–æ—á–Ω–æ"
                    else:
                        end_date = start_date + timedelta(days=plan["days"])
                        success = self.db.update_user_status(
                            target_user_id, 
                            "active", 
                            plan_key, 
                            start_date.isoformat(), 
                            end_date.isoformat()
                        )
                        end_date_str = end_date.strftime("%Y-%m-%d")
                    
                    if success:
                        username = user["username"] or "unknown"
                        plan_name = plan["name"]
                        
                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        success_message = f"‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞: {plan_name}. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Å –Ω–∞–º–∏!"
                        
                        self.send_message(target_user_id, success_message)
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                        active_until = end_date_str if end_date_str != "–±–µ—Å—Å—Ä–æ—á–Ω–æ" else "lifetime"
                        self.send_log(f"""[CONFIRMED]
user: @{username} (ID {target_user_id})
tariff: {plan_name}
active_until: {active_until}""")
                        
                        self.send_message(chat_id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Å —Ç–∞—Ä–∏—Ñ–æ–º {plan_name}")
                    else:
                        self.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                        
                except ValueError:
                    self.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
            elif command == "payments":
                payments = self.db.get_latest_payments(10)
                if payments:
                    message = "üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏:\n\n"
                    for payment in payments:
                        payment_id, username, txid, status, payment_method, plan, created_at = payment
                        txid_short = txid[:10] + "..." if txid and len(txid) > 10 else (txid or "N/A")
                        created_date = self.safe_parse_date(created_at)
                        created_date_str = created_date.strftime("%Y-%m-%d %H:%M") if created_date else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                        
                        status_emoji = "‚úÖ" if status == "confirmed" else "‚è≥" if status == "pending" else "‚ùå"
                        plan_name = PLANS.get(plan, {}).get("name", "Unknown") if plan else "Unknown"
                        method_name = "–∫—Ä–∏–ø—Ç–∞" if payment_method == "crypto" else "Tribute"
                        
                        message += f"{status_emoji} #{payment_id} @{username or 'no_username'}\n"
                        message += f"–ü–ª–∞–Ω: {plan_name} | –ú–µ—Ç–æ–¥: {method_name}\n"
                        message += f"TXID: {txid_short}\n"
                        message += f"–°—Ç–∞—Ç—É—Å: {status}\n"
                        message += f"–î–∞—Ç–∞: {created_date_str}\n\n"
                else:
                    message = "üìä –ü–ª–∞—Ç–µ–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                
                self.send_message(chat_id, message)
            
            elif command == "broadcast" and args:
                message = " ".join(args)
                active_users = self.db.get_active_users()
                sent_count = 0
                
                for user_id in active_users:
                    if self.send_message(user_id, message):
                        sent_count += 1
                    time.sleep(0.1)
                
                self.send_log(f"[BROADCAST] Message sent to {sent_count} users")
                self.send_message(chat_id, f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
            
            elif command == "stats":
                stats = self.db.get_database_stats()
                message = f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {stats['total_users']}
üí∞ –ü–ª–∞—Ç–µ–∂–∏: {stats['total_payments']}

–°—Ç–∞—Ç—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:
"""
                for status, count in stats['users'].items():
                    message += f"‚Ä¢ {status}: {count}\n"
                
                self.send_message(chat_id, message)
            
            elif command == "help":
                help_text = """
üîß –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:

/users - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/confirm <user_id> - –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/payments - –æ—Ç—á–µ—Ç –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º –ø–ª–∞—Ç–µ–∂–∞–º
/broadcast <—Å–æ–æ–±—â–µ–Ω–∏–µ> - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
/test_log - —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥-–∫–∞–Ω–∞–ª
/test_forward - —Ç–µ—Å—Ç–æ–≤–∞—è –ø–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
/test_db - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ
/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º

–ü—Ä–∏–º–µ—Ä—ã:
/confirm 123456789
/broadcast –í–∞–∂–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
                """
                self.send_message(chat_id, help_text)
            
            elif command == "test_log":
                self.send_log("[TEST] –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞")
                self.send_message(chat_id, "‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ª–æ–≥-–∫–∞–Ω–∞–ª")
            
            elif command == "test_forward":
                test_message = "üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏"
                if self.send_message(chat_id, test_message):
                    self.send_message(chat_id, "‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                else:
                    self.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –ø–µ—Ä–µ—Å—ã–ª–∫–∏")
            
            elif command == "test_db":
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
                    users_count = len(self.db.get_all_users())
                    self.send_message(chat_id, f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")
                except Exception as e:
                    self.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        except Exception as e:
            error_msg = f"[ERROR] –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ {command}: {e}"
            print(error_msg)
            self.send_log(error_msg)
            self.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã")
    
    def handle_admin_panel(self, chat_id, user_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
        try:
            if user_id not in ADMIN_IDS:
                self.send_message(chat_id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –±—ã—Å—Ç—Ä—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = self.db.get_database_stats()
            
            admin_text = f"""‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ SignalBot Pro

üìä –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}
üí∞ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {stats['active_users']}
‚è≥ –û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {stats['users'].get('pending', 0)}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
            
            keyboard = self.create_inline_keyboard([
                [{"text": "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "callback_data": "admin_users"}, {"text": "üí∞ –ü–ª–∞—Ç–µ–∂–∏", "callback_data": "admin_payments"}],
                [{"text": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "callback_data": "admin_stats"}, {"text": "üì¢ –†–∞—Å—Å—ã–ª–∫–∞", "callback_data": "admin_broadcast"}],
                [{"text": "üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "callback_data": "admin_search"}, {"text": "‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è", "callback_data": "admin_quick"}],
                [{"text": "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "callback_data": "admin_analytics"}, {"text": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "callback_data": "admin_settings"}]
            ])
            
            self.send_message(chat_id, admin_text, keyboard)
            
        except Exception as e:
            error_msg = f"[ERROR] –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: {e}"
            print(error_msg)
            self.send_log(error_msg)
    
    def process_callback_query(self, callback_query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫)"""
        try:
            data = callback_query.get("data")
            chat_id = callback_query["message"]["chat"]["id"]
            user_id = callback_query["from"]["id"]
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∞–Ω–∞ (—Ç–µ–ø–µ—Ä—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ —É–±—Ä–∞–ª–∏ inline –∫–Ω–æ–ø–∫–∏)
            if data.startswith("plan_"):
                plan_key = data.replace("plan_", "")
                self.handle_plan_selection(chat_id, user_id, plan_key)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö callback
            elif data == "admin_users":
                if user_id in ADMIN_IDS:
                    self.handle_admin_users(chat_id, user_id)
                else:
                    self.send_message(chat_id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            
            elif data == "admin_payments":
                if user_id in ADMIN_IDS:
                    self.handle_admin_payments(chat_id, user_id)
                else:
                    self.send_message(chat_id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            
            elif data == "admin_stats":
                if user_id in ADMIN_IDS:
                    self.handle_admin_stats(chat_id, user_id)
                else:
                    self.send_message(chat_id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            
            elif data == "admin_broadcast":
                if user_id in ADMIN_IDS:
                    self.send_message(chat_id, "‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
                    self.db.set_user_state(user_id, "waiting_broadcast")
                else:
                    self.send_message(chat_id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            
            elif data == "admin_search":
                if user_id in ADMIN_IDS:
                    self.send_message(chat_id, "üîç –í–≤–µ–¥–∏—Ç–µ username –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:")
                    self.db.set_user_state(user_id, "waiting_user_search")
                else:
                    self.send_message(chat_id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            
            elif data == "admin_quick":
                if user_id in ADMIN_IDS:
                    self.handle_admin_quick_actions(chat_id, user_id)
                else:
                    self.send_message(chat_id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            
            elif data == "admin_analytics":
                if user_id in ADMIN_IDS:
                    self.handle_admin_analytics(chat_id, user_id)
                else:
                    self.send_message(chat_id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            
            elif data == "admin_settings":
                if user_id in ADMIN_IDS:
                    self.handle_admin_settings(chat_id, user_id)
                else:
                    self.send_message(chat_id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
            elif data.startswith("confirm_"):
                if user_id in ADMIN_IDS:
                    target_user_id = int(data.replace("confirm_", ""))
                    self.handle_confirm_payment(chat_id, user_id, target_user_id)
                else:
                    self.send_message(chat_id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            
            # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            elif data == "back_main":
                self.handle_start(chat_id, user_id, callback_query["from"].get("username"))
            
            # –í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
            elif data == "back_admin_panel":
                if user_id in ADMIN_IDS:
                    self.handle_admin_panel(chat_id, user_id)
                else:
                    self.send_message(chat_id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            
            # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            elif data == "quick_confirm_all":
                if user_id in ADMIN_IDS:
                    self.handle_quick_confirm_all(chat_id, user_id)
                else:
                    self.send_message(chat_id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            
            elif data == "quick_today_stats":
                if user_id in ADMIN_IDS:
                    self.handle_quick_today_stats(chat_id, user_id)
                else:
                    self.send_message(chat_id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            
            elif data == "quick_update_statuses":
                if user_id in ADMIN_IDS:
                    self.handle_quick_update_statuses(chat_id, user_id)
                else:
                    self.send_message(chat_id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            
            elif data == "quick_test_message":
                if user_id in ADMIN_IDS:
                    self.handle_quick_test_message(chat_id, user_id)
                else:
                    self.send_message(chat_id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        
        except Exception as e:
            error_msg = f"[ERROR] Callback query: {e}"
            print(error_msg)
            self.send_log(error_msg)
    
    def handle_admin_users(self, chat_id, user_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        try:
            users = self.db.get_users_for_admin(20)
            if not users:
                self.send_message(chat_id, "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            message = "üë• –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
            for user_data in users:
                telegram_id, username, status, plan, start_date, end_date = user_data
                plan_name = PLANS.get(plan, {}).get("name", "none") if plan else "none"
                status_emoji = "‚úÖ" if status == "active" else "‚è≥" if status == "pending" else "‚ùå"
                
                message += f"{status_emoji} @{username or 'no_username'} (ID: {telegram_id})\n"
                message += f"–°—Ç–∞—Ç—É—Å: {status} | –ü–ª–∞–Ω: {plan_name}"
                
                if end_date and plan != "lifetime":
                    end_date_dt = self.safe_parse_date(end_date)
                    if end_date_dt:
                        end_date_str = end_date_dt.strftime("%Y-%m-%d")
                        message += f" | –î–æ: {end_date_str}"
                    else:
                        message += " | –î–æ: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                elif plan == "lifetime":
                    message += " | –î–æ: –±–µ—Å—Å—Ä–æ—á–Ω–æ"
                
                message += "\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            keyboard_buttons = []
            for user_data in users:
                telegram_id, username, status, plan, start_date, end_date = user_data
                if status == "pending":
                    keyboard_buttons.append([{"text": f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å @{username or 'no_username'}", "callback_data": f"confirm_{telegram_id}"}])
            
            if keyboard_buttons:
                keyboard = self.create_inline_keyboard(keyboard_buttons)
                self.send_message(chat_id, message, keyboard)
            else:
                self.send_message(chat_id, message)
                
        except Exception as e:
            error_msg = f"[ERROR] –ê–¥–º–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {e}"
            print(error_msg)
            self.send_log(error_msg)
    
    def handle_admin_payments(self, chat_id, user_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞—Ç–µ–∂–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        try:
            payments = self.db.get_latest_payments(10)
            if not payments:
                self.send_message(chat_id, "üí∞ –ü–ª–∞—Ç–µ–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            message = "üí∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏:\n\n"
            for payment in payments:
                payment_id, username, txid, status, payment_method, plan, created_at = payment
                txid_short = txid[:10] + "..." if txid and len(txid) > 10 else (txid or "N/A")
                created_date = self.safe_parse_date(created_at)
                created_date_str = created_date.strftime("%Y-%m-%d %H:%M") if created_date else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                
                status_emoji = "‚úÖ" if status == "confirmed" else "‚è≥" if status == "pending" else "‚ùå"
                plan_name = PLANS.get(plan, {}).get("name", "Unknown") if plan else "Unknown"
                method_name = "–∫—Ä–∏–ø—Ç–∞" if payment_method == "crypto" else "Tribute"
                
                message += f"{status_emoji} @{username or 'no_username'}\n"
                message += f"–ü–ª–∞–Ω: {plan_name} | –ú–µ—Ç–æ–¥: {method_name}\n"
                message += f"TXID: {txid_short}\n"
                message += f"–°—Ç–∞—Ç—É—Å: {status} | –î–∞—Ç–∞: {created_date_str}\n\n"
            
            self.send_message(chat_id, message)
            
        except Exception as e:
            error_msg = f"[ERROR] –ê–¥–º–∏–Ω –ø–ª–∞—Ç–µ–∂–∏: {e}"
            print(error_msg)
            self.send_log(error_msg)
    
    def handle_admin_stats(self, chat_id, user_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        try:
            stats = self.db.get_database_stats()
            
            message = f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫:

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}
üí∞ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {stats['active_users']}
‚è≥ –û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {stats['users'].get('pending', 0)}
‚ùå –ò—Å—Ç–µ–∫—à–∏—Ö: {stats['users'].get('expired', 0)}

–ü–æ —Ç–∞—Ä–∏—Ñ–∞–º:"""
            
            for plan, count in stats['plans'].items():
                if plan != 'none':
                    plan_name = PLANS.get(plan, {}).get("name", plan)
                    message += f"\n‚Ä¢ {plan_name}: {count}"
            
            self.send_message(chat_id, message)
            
        except Exception as e:
            error_msg = f"[ERROR] –ê–¥–º–∏–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {e}"
            print(error_msg)
            self.send_log(error_msg)
    
    def handle_confirm_payment(self, chat_id, user_id, target_user_id):
        """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            target_user = self.db.get_user(target_user_id)
            if not target_user:
                self.send_message(chat_id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            plan_key = target_user["plan"]
            plan = PLANS.get(plan_key)
            if not plan:
                self.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            start_date = datetime.now()
            if plan_key == "lifetime":
                success = self.db.update_user_status(
                    target_user_id, 
                    "active", 
                    plan_key, 
                    start_date.isoformat(), 
                    None
                )
                end_date_str = "–±–µ—Å—Å—Ä–æ—á–Ω–æ"
            else:
                end_date = start_date + timedelta(days=plan["days"])
                success = self.db.update_user_status(
                    target_user_id, 
                    "active", 
                    plan_key, 
                    start_date.isoformat(), 
                    end_date.isoformat()
                )
                end_date_str = end_date.strftime("%Y-%m-%d")
            
            if success:
                username = target_user["username"] or "unknown"
                plan_name = plan["name"]
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                success_message = f"‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞: {plan_name}. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Å –Ω–∞–º–∏!"
                
                self.send_message(target_user_id, success_message)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                active_until = end_date_str if end_date_str != "–±–µ—Å—Å—Ä–æ—á–Ω–æ" else "lifetime"
                self.send_log(f"""[CONFIRMED]
user: @{username} (ID {target_user_id})
tariff: {plan_name}
active_until: {active_until}""")
                
                self.send_message(chat_id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Å —Ç–∞—Ä–∏—Ñ–æ–º {plan_name}")
            else:
                self.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                
        except Exception as e:
            error_msg = f"[ERROR] –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã: {e}"
            print(error_msg)
            self.send_log(error_msg)
    
    def handle_admin_quick_actions(self, chat_id, user_id):
        """–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        try:
            quick_text = """‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
            
            keyboard = self.create_inline_keyboard([
                [{"text": "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Å–µ pending", "callback_data": "quick_confirm_all"}],
                [{"text": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è", "callback_data": "quick_today_stats"}],
                [{"text": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã", "callback_data": "quick_update_statuses"}],
                [{"text": "üì§ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", "callback_data": "quick_test_message"}],
                [{"text": "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –ø–∞–Ω–µ–ª—å", "callback_data": "back_admin_panel"}]
            ])
            
            self.send_message(chat_id, quick_text, keyboard)
            
        except Exception as e:
            error_msg = f"[ERROR] –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: {e}"
            print(error_msg)
            self.send_log(error_msg)
    
    def handle_admin_analytics(self, chat_id, user_id):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        try:
            stats = self.db.get_database_stats()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–Ω—è–º
            daily_stats = self.db.get_daily_stats()
            
            analytics_text = f"""üìà –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞

üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}
üí∞ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {stats['active_users']}
‚è≥ –û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {stats['users'].get('pending', 0)}
‚ùå –ò—Å—Ç–µ–∫—à–∏—Ö: {stats['users'].get('expired', 0)}

üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:
üë§ –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {daily_stats['new_users']}
üí∞ –ù–æ–≤—ã—Ö –æ–ø–ª–∞—Ç: {daily_stats['new_payments']}
‚ùå –ò—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {daily_stats['expired_users']}

üìà –ü–æ —Ç–∞—Ä–∏—Ñ–∞–º:"""
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–ª–∞–Ω–∞–º
            for plan, count in stats['plans'].items():
                if plan != 'none' and count > 0:
                    plan_name = PLANS.get(plan, {}).get("name", plan)
                    analytics_text += f"\n‚Ä¢ {plan_name}: {count}"
            
            self.send_message(chat_id, analytics_text)
            
        except Exception as e:
            error_msg = f"[ERROR] –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: {e}"
            print(error_msg)
            self.send_log(error_msg)
    
    def handle_admin_settings(self, chat_id, user_id):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        try:
            settings_text = f"""‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞

üîß –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
üì± –¢–æ–∫–µ–Ω –±–æ—Ç–∞: {TOKEN[:10]}...{TOKEN[-10:]}
üëë –ê–¥–º–∏–Ω—ã: {len(ADMIN_IDS)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
üí∞ –ö—Ä–∏–ø—Ç–æ-–∞–¥—Ä–µ—Å: {CRYPTO_ADDRESS[:10]}...{CRYPTO_ADDRESS[-10:]}
üìä –ö–∞–Ω–∞–ª —Å–∏–≥–Ω–∞–ª–æ–≤: {SIGNAL_CHANNEL_ID}
üìù –õ–æ–≥-–∫–∞–Ω–∞–ª: {LOG_CHANNEL_ID}

üîç –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ config.py"""
            
            self.send_message(chat_id, settings_text)
            
        except Exception as e:
            error_msg = f"[ERROR] –ù–∞—Å—Ç—Ä–æ–π–∫–∏: {e}"
            print(error_msg)
            self.send_log(error_msg)
    
    def handle_user_search(self, chat_id, user_id, search_query):
        """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username –∏–ª–∏ ID"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ ID (–µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ)
            try:
                target_id = int(search_query)
                user = self.db.get_user(target_id)
                if user:
                    self.send_user_info(chat_id, user_id, user)
                    return
            except ValueError:
                pass
            
            # –ò—â–µ–º –ø–æ username
            users = self.db.get_all_users()
            found_users = []
            
            for user_data in users:
                username = user_data[1]  # username –≤ –∏–Ω–¥–µ–∫—Å–µ 1
                if username and search_query.lower() in username.lower():
                    found_users.append(user_data)
            
            if found_users:
                if len(found_users) == 1:
                    # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    user_data = found_users[0]
                    user_info = {
                        'telegram_id': user_data[0],
                        'username': user_data[1],
                        'status': user_data[2],
                        'plan': user_data[3],
                        'start_date': user_data[4],
                        'end_date': user_data[5],
                        'joined_at': user_data[6],
                        'last_seen': user_data[7]
                    }
                    self.send_user_info(chat_id, user_id, user_info)
                else:
                    # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
                    message = f"üîç –ù–∞–π–¥–µ–Ω–æ {len(found_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
                    for i, user_data in enumerate(found_users[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10
                        telegram_id, username, status = user_data[0], user_data[1], user_data[2]
                        status_emoji = "‚úÖ" if status == "active" else "‚è≥" if status == "pending" else "‚ùå"
                        message += f"{i+1}. {status_emoji} @{username or 'no_username'} (ID: {telegram_id})\n"
                    
                    if len(found_users) > 10:
                        message += f"\n... –∏ –µ—â–µ {len(found_users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
                    
                    message += "\n\nüí° –í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—ã–π ID –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
                    self.send_message(chat_id, message)
            else:
                self.send_message(chat_id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{search_query}' –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Ç–æ—á–Ω—ã–π username –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                
        except Exception as e:
            error_msg = f"[ERROR] –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}"
            print(error_msg)
            self.send_log(error_msg)
            self.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    def send_user_info(self, chat_id, admin_id, user):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        try:
            plan_name = PLANS.get(user["plan"], {}).get("name", "Unknown") if user["plan"] else "None"
            
            info_text = f"""üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ

üÜî ID: {user['telegram_id']}
üë§ Username: @{user['username'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
üìä –°—Ç–∞—Ç—É—Å: {user['status']}
üíé –ü–ª–∞–Ω: {plan_name}
üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user['joined_at'][:10] if user['joined_at'] else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user['last_seen'][:16] if user['last_seen'] else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"""
            
            if user["start_date"]:
                info_text += f"\nüöÄ –ù–∞—á–∞–ª–æ –ø–æ–¥–ø–∏—Å–∫–∏: {user['start_date'][:10]}"
            
            if user["end_date"]:
                if user["plan"] == "lifetime":
                    info_text += f"\n‚ôæÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞: –±–µ—Å—Å—Ä–æ—á–Ω–∞—è"
                else:
                    end_date_dt = self.safe_parse_date(user["end_date"])
                    if end_date_dt:
                        end_date_str = end_date_dt.strftime("%d.%m.%Y")
                        days_left = (end_date_dt - datetime.now()).days
                        info_text += f"\nüìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {end_date_str}"
                        info_text += f"\n‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}"
                    else:
                        info_text += f"\nüìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            keyboard_buttons = []
            
            if user["status"] == "pending":
                keyboard_buttons.append([{"text": f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å @{user['username'] or 'user'}", "callback_data": f"confirm_{user['telegram_id']}"}])
            
            if user["status"] in ["active", "expired", "none"]:
                keyboard_buttons.append([{"text": f"üì§ –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", "callback_data": f"message_{user['telegram_id']}"}])
            
            keyboard_buttons.append([{"text": "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –ø–∞–Ω–µ–ª—å", "callback_data": "back_admin_panel"}])
            
            if keyboard_buttons:
                keyboard = self.create_inline_keyboard(keyboard_buttons)
                self.send_message(chat_id, info_text, keyboard)
            else:
                self.send_message(chat_id, info_text)
                
        except Exception as e:
            error_msg = f"[ERROR] –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}"
            print(error_msg)
            self.send_log(error_msg)
    
    def handle_quick_confirm_all(self, chat_id, user_id):
        """–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Å–µ—Ö pending –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            users = self.db.get_all_users()
            pending_users = [u for u in users if u[2] == "pending"]  # status –≤ –∏–Ω–¥–µ–∫—Å–µ 2
            
            if not pending_users:
                self.send_message(chat_id, "‚úÖ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'pending' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
                return
            
            confirmed_count = 0
            for user_data in pending_users:
                try:
                    target_user_id = user_data[0]  # telegram_id
                    target_user = self.db.get_user(target_user_id)
                    
                    if target_user and target_user["plan"]:
                        plan_key = target_user["plan"]
                        plan = PLANS.get(plan_key)
                        
                        if plan:
                            start_date = datetime.now()
                            if plan_key == "lifetime":
                                success = self.db.update_user_status(
                                    target_user_id, 
                                    "active", 
                                    plan_key, 
                                    start_date.isoformat(), 
                                    None
                                )
                                end_date_str = "–±–µ—Å—Å—Ä–æ—á–Ω–æ"
                            else:
                                end_date = start_date + timedelta(days=plan["days"])
                                success = self.db.update_user_status(
                                    target_user_id, 
                                    "active", 
                                    plan_key, 
                                    start_date.isoformat(), 
                                    end_date.isoformat()
                                )
                                end_date_str = end_date.strftime("%Y-%m-%d")
                            
                            if success:
                                confirmed_count += 1
                                
                                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                username = target_user["username"] or "unknown"
                                plan_name = plan["name"]
                                
                                success_message = f"‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞: {plan_name}. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Å –Ω–∞–º–∏!"
                                
                                self.send_message(target_user_id, success_message)
                                
                except Exception as e:
                    print(f"[ERROR] –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}: {e}")
            
            self.send_message(chat_id, f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ {confirmed_count} –∏–∑ {len(pending_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            self.send_log(f"[QUICK CONFIRM] –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ {confirmed_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏")
            
        except Exception as e:
            error_msg = f"[ERROR] –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: {e}"
            print(error_msg)
            self.send_log(error_msg)
            self.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    def handle_quick_today_stats(self, chat_id, user_id):
        """–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
        try:
            daily_stats = self.db.get_daily_stats()
            
            stats_text = f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è

üë§ –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {daily_stats['new_users']}
üí∞ –ù–æ–≤—ã—Ö –æ–ø–ª–∞—Ç: {daily_stats['new_payments']}
‚ùå –ò—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {daily_stats['expired_users']}
üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {daily_stats['active_users']}

üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y')}"""
            
            self.send_message(chat_id, stats_text)
            
        except Exception as e:
            error_msg = f"[ERROR] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {e}"
            print(error_msg)
            self.send_log(error_msg)
    
    def handle_quick_update_statuses(self, chat_id, user_id):
        """–ë—ã—Å—Ç—Ä–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
            expired_users = self.db.get_expired_users()
            updated_count = 0
            
            for user in expired_users:
                user_id_expired = user["telegram_id"]
                username = user["username"]
                
                self.db.update_user_status(user_id_expired, "expired")
                self.send_message(user_id_expired, "‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.")
                updated_count += 1
                
                self.send_log(f"[EXPIRED] user: @{username} (ID: {user_id_expired})")
            
            self.send_message(chat_id, f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç—É—Å–æ–≤: {updated_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            self.send_log(f"[QUICK UPDATE] –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} —Å—Ç–∞—Ç—É—Å–æ–≤")
            
        except Exception as e:
            error_msg = f"[ERROR] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤: {e}"
            print(error_msg)
            self.send_log(error_msg)
    
    def handle_quick_test_message(self, chat_id, user_id):
        """–ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            test_message = f"""üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
üëë –û—Ç: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä SignalBot Pro

‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"""
            
            self.send_message(chat_id, test_message)
            self.send_log(f"[QUICK TEST] –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–æ–º {user_id}")
            
        except Exception as e:
            error_msg = f"[ERROR] –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}"
            print(error_msg)
            self.send_log(error_msg)

    def process_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            chat_id = message["chat"]["id"]
            user_id = message["from"]["id"]
            username = message["from"].get("username")
            text = message.get("text", "")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_state = self.db.get_user_state(user_id)
        
            if text.startswith("/start"):
                self.handle_start(chat_id, user_id, username)
            
            elif text == "üìà –ü–æ–ª—É—á–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã":
                self.handle_get_signals(chat_id, user_id)
            
            elif text == "üÜò –ü–æ–º–æ—â—å":
                self.handle_help_faq(chat_id)
            
            elif text == "üí∞ –û–ø–ª–∞—Ç–∞":
                self.handle_payment_start(chat_id, user_id)
            
            elif text == "‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª":
                self.handle_payment_done(chat_id, user_id)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–æ–≤
            elif text == "1 –º–µ—Å—è—Ü ‚Äî 39 USDT":
                self.handle_plan_selection(chat_id, user_id, "1m")
            elif text == "3 –º–µ—Å—è—Ü–∞ ‚Äî 99 USDT":
                self.handle_plan_selection(chat_id, user_id, "3m")
            elif text == "–ü–æ–∂–∏–∑–Ω–µ–Ω–Ω–æ ‚Äî 239 USDT":
                self.handle_plan_selection(chat_id, user_id, "lifetime")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã
            elif text == "üí∞ –û–ø–ª–∞—Ç–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–π (TRC20)":
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞–Ω –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if user_state and user_state.startswith("payment_method_"):
                    plan_key = user_state.replace("payment_method_", "")
                    self.handle_crypto_payment(chat_id, user_id, plan_key)
                else:
                    self.send_message(chat_id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ")
            
            elif text == "‚ö° –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Tribute":
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞–Ω –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if user_state and user_state.startswith("payment_method_"):
                    plan_key = user_state.replace("payment_method_", "")
                    self.handle_tribute_payment(chat_id, user_id, plan_key)
                else:
                    self.send_message(chat_id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ")
            
            elif text == "üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω":
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω", –ø—Ä–æ—Å–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
                self.send_message(chat_id, "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞:")
            
            elif text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
                keyboard = self.create_reply_keyboard([
                    ["üìà –ü–æ–ª—É—á–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã"],
                    ["üí∞ –û–ø–ª–∞—Ç–∞"],
                    ["‚ÑπÔ∏è –ú–æ–π —Å—Ç–∞—Ç—É—Å"],
                    ["üßæ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "üÜò –ü–æ–º–æ—â—å"]
                ])
                self.send_message(chat_id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", keyboard)
            
            elif text == "‚ÑπÔ∏è –ú–æ–π —Å—Ç–∞—Ç—É—Å" or text.startswith("/status"):
                self.handle_status(chat_id, user_id)
        
            elif text == "üßæ –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
                self.handle_support(chat_id)
            
            elif text.startswith("/users"):
                self.handle_admin_command(chat_id, user_id, "users", [])
            
            elif text.startswith("/confirm"):
                args = text.split()[1:] if len(text.split()) > 1 else []
                self.handle_admin_command(chat_id, user_id, "confirm", args)
            
            elif text.startswith("/payments"):
                self.handle_admin_command(chat_id, user_id, "payments", [])
            
            elif text.startswith("/broadcast"):
                args = text.split()[1:] if len(text.split()) > 1 else []
                self.handle_admin_command(chat_id, user_id, "broadcast", args)
            
            elif text.startswith("/stats"):
                self.handle_admin_command(chat_id, user_id, "stats", [])
            
            elif text.startswith("/help"):
                self.handle_admin_command(chat_id, user_id, "help", [])
            
            elif text.startswith("/test_log"):
                self.handle_admin_command(chat_id, user_id, "test_log", [])
            
            elif text.startswith("/test_forward"):
                self.handle_admin_command(chat_id, user_id, "test_forward", [])
            
            elif text.startswith("/test_db"):
                self.handle_admin_command(chat_id, user_id, "test_db", [])
            
            elif text.startswith("/admin"):
                self.handle_admin_panel(chat_id, user_id)
            
            elif text.startswith("/panel"):
                self.handle_admin_panel(chat_id, user_id)
        
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            elif user_state == "waiting_txid":
                self.handle_txid(chat_id, user_id, username, text)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
            elif user_state == "waiting_broadcast":
                if user_id in ADMIN_IDS:
                    active_users = self.db.get_active_users()
                    sent_count = 0
                    
                    for target_user_id in active_users:
                        try:
                            if self.send_message(target_user_id, text):
                                sent_count += 1
                            time.sleep(0.1)
                        except Exception as e:
                            print(f"[ERROR] –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")
                    
                    self.send_log(f"[BROADCAST] –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
                    self.send_message(chat_id, f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
                    self.db.set_user_state(user_id, None)
                else:
                    self.send_message(chat_id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                    self.db.set_user_state(user_id, None)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω–∞
            elif user_state == "waiting_user_search":
                if user_id in ADMIN_IDS:
                    self.handle_user_search(chat_id, user_id, text)
                    self.db.set_user_state(user_id, None)
                else:
                    self.send_message(chat_id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                    self.db.set_user_state(user_id, None)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
            elif message.get("photo"):
                if (user_state and 
                    (user_state == "waiting_screenshot" or 
                     user_state.startswith("waiting_screenshot_crypto_") or 
                     user_state.startswith("waiting_screenshot_tribute_"))):
                    file_id = message["photo"][-1]["file_id"]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    self.handle_screenshot(chat_id, user_id, username, file_id, user_state)
        
        except Exception as e:
            error_msg = f"[ERROR] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}"
            print(error_msg)
            self.send_log(error_msg)
    
    def check_signal_channel(self, updates):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–º –∫–∞–Ω–∞–ª–µ"""
        try:
            new_messages = []
            for update in updates:
                message = update.get("channel_post") or update.get("edited_channel_post")
                if not message:
                    continue
                if message.get("chat", {}).get("id") != SIGNAL_CHANNEL_ID:
                    continue

                message_id = message.get("message_id")
                if self.last_message_id is None or message_id > self.last_message_id:
                    self.last_message_id = message_id
                    new_messages.append(message)

            if not new_messages:
                return

            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π + –∞–¥–º–∏–Ω–æ–≤
            active_users = self.db.get_active_users()
            all_recipients = list(set(active_users + ADMIN_IDS))

            for message in new_messages:
                message_id = message.get("message_id")
                forwarded_count = 0
                for user_id in all_recipients:
                    try:
                        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤–∫–ª—é—á–∞—è —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã)
                        ok = self.forward_message(SIGNAL_CHANNEL_ID, user_id, message_id)
                        if ok:
                            forwarded_count += 1
                        time.sleep(0.05)
                    except Exception as e:
                        print(f"[ERROR] –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ {message_id} -> {user_id}: {e}")

                if forwarded_count > 0:
                    self.send_log(f"[SIGNAL FORWARDED] message_id={message_id}, users={forwarded_count}")

        except Exception as e:
            self.send_log(f"[ERROR] check_signal_channel: {e}")

    
    def check_subscriptions(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∏—Å—Ç–µ—á–µ–Ω–∏–µ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–∞—é—Ç –∑–∞–≤—Ç—Ä–∞
            tomorrow = datetime.now() + timedelta(days=1)
            expiring_users = self.db.get_expiring_users(tomorrow)
            
            for user in expiring_users:
                user_id = user["telegram_id"]
                username = user["username"]
                end_date_dt = self.safe_parse_date(user.get("end_date"))
                if end_date_dt:
                    end_date_str = end_date_dt.strftime("%d.%m.%Y")
                    self.send_message(user_id, f"‚ö†Ô∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–µ—Ç –∑–∞–≤—Ç—Ä–∞ ({end_date_str}). –ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤.")
                    self.send_log(f"[REMINDER] user: @{username} (ID: {user_id}), expires: {end_date_str}")
                else:
                    self.send_message(user_id, f"‚ö†Ô∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç. –ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤.")
                    self.send_log(f"[REMINDER] user: @{username} (ID: {user_id}), expires: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
            expired_users = self.db.get_expired_users()
            
            for user in expired_users:
                user_id = user["telegram_id"]
                username = user["username"]
                
                self.db.update_user_status(user_id, "expired")
                self.send_message(user_id, "‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.")
                self.send_log(f"[EXPIRED] user: @{username} (ID: {user_id})")
                
        except Exception as e:
            error_msg = f"[ERROR] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫: {e}"
            print(error_msg)
            self.send_log(error_msg)
    
    def create_daily_backup(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            today = datetime.now().date()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏ –ª–∏ —É–∂–µ –±—ç–∫–∞–ø —Å–µ–≥–æ–¥–Ω—è
            if self.last_backup_date == today:
                return
            
            if self.db.create_backup():
                self.last_backup_date = today
                self.send_log("[BACKUP] –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞")
            else:
                self.send_log("[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é")
                
        except Exception as e:
            error_msg = f"[ERROR] –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ: {e}"
            print(error_msg)
            self.send_log(error_msg)
    
    def subscription_checker_thread(self):
        """–ü–æ—Ç–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫"""
        while self.running:
            try:
                self.check_subscriptions()
                time.sleep(86400)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ –¥–µ–Ω—å
            except Exception as e:
                error_msg = f"[ERROR] –ü–æ—Ç–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {e}"
                print(error_msg)
                self.send_log(error_msg)
                time.sleep(3600)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º —á–∞—Å
    
    def backup_thread(self):
        """–ü–æ—Ç–æ–∫ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç—á–µ—Ç–æ–≤"""
        last_report_date = None
        
        while self.running:
            try:
                today = datetime.now().date()
                
                # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç
                if last_report_date != today:
                    self.send_daily_report()
                    last_report_date = today
                
                # –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
                self.create_daily_backup()
                
                time.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å
            except Exception as e:
                error_msg = f"[ERROR] –ü–æ—Ç–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {e}"
                print(error_msg)
                self.send_log(error_msg)
                time.sleep(3600)
    
    def send_daily_report(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        try:
            stats = self.db.get_daily_stats()
            
            report_message = f"""üìÜ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç

üë§ –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {stats['new_users']}
üí∞ –ù–æ–≤—ã—Ö –æ–ø–ª–∞—Ç: {stats['new_payments']}
‚ùå –ò—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {stats['expired_users']}
üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {stats['active_users']}"""
            
            self.send_log(report_message)
            
        except Exception as e:
            print(f"[ERROR] –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç: {e}")
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞ - –µ–¥–∏–Ω—ã–π polling –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        self.running = True
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–∫–∏ –¥–ª—è —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
        subscription_thread = threading.Thread(target=self.subscription_checker_thread)
        subscription_thread.daemon = True
        subscription_thread.start()
        
        backup_thread = threading.Thread(target=self.backup_thread)
        backup_thread.daemon = True
        backup_thread.start()
        
        offset = None
        last_check_time = time.time()
        
        print("[BOT] –ó–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤")
        self.send_log("[BOT] –ó–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤")
        
        while self.running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                updates = self.get_updates(offset, timeout=30)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
                current_time = time.time()
                if current_time - last_check_time >= 10:
                    self.check_signal_channel(updates)
                    last_check_time = current_time
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                for update in updates:
                    offset = update["update_id"] + 1
                    
                    if "message" in update:
                        self.process_message(update["message"])
                    
                    elif "callback_query" in update:
                        self.process_callback_query(update["callback_query"])
                        
                        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã Telegram –Ω–µ —Ä—É–≥–∞–ª—Å—è
                        try:
                            callback_query_id = update["callback_query"]["id"]
                            self.send_request("answerCallbackQuery", {"callback_query_id": callback_query_id})
                        except Exception:
                            pass
                
            except KeyboardInterrupt:
                print("\n[BOT] –û—Å—Ç–∞–Ω–æ–≤–∫–∞...")
                self.running = False
                self.send_log("[BOT] –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                break
            
            except requests.exceptions.Timeout:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º timeout –æ—à–∏–±–∫–∏
                time.sleep(1)
                continue
            
            except requests.exceptions.RequestException as e:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏
                if "409" not in str(e) and "timeout" not in str(e).lower():
                    print(f"[NETWORK ERROR] {e}")
                time.sleep(3)
                continue
            
            except Exception as e:
                error_msg = f"[ERROR] –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª: {e}"
                print(error_msg)
                # –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –æ—à–∏–±–∫–∏, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –∫–∞–Ω–∞–ª
                if "no such column" not in str(e).lower():
                    self.send_log(error_msg)
                time.sleep(3)

if __name__ == "__main__":
    bot = SignalBot()
    bot.run()
